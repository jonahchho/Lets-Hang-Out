<!--
<p class="lead mb-3"> Welcome username </p>
-->


<div id="left" class="horizontal container">

  <br>

  <h1 class="text-center" style="font-size:2vw;">
      Lets-Hang-Out Chat
  </h1>

  <br>

  <button id="create" type="button" class="btn btn-success btn-lg btn-block">Create</button>
  <button id="join" type="button" class="btn btn-primary btn-lg btn-block">Join</button>
  <button id="leave" type="button" class="btn btn-danger btn-lg btn-block">Leave</button>

  <br>

  <div class="chatArea">
      <ul id="messages" class="messages" style="display:none;"></ul>
  </div>

  <br>

  <input id="inputMessage" class="form-control" placeholder="Enter message..." style="display:none;"></input>
  <!--<textarea id="textarea" class="form-control" placeholder="Enter message..."></textarea> -->
</div>

<div id="right" class="horizontal">
  <div id="map"></div>
</div>

<script>

  var FADE_TIME = 150; // ms
  var TYPING_TIMER_LENGTH = 400; // ms
  var COLORS = [
    '#e21400', '#91580f', '#f8a700', '#f78b00',
    '#58dc00', '#287b00', '#a8f07a', '#4ae8c4',
    '#3b88eb', '#3824aa', '#a700ff', '#d300e7'
  ];

  var createRoom = document.getElementById('create');
  var joinRoom = document.getElementById('join');
  var leaveRoom = document.getElementById('leave');
  var $messages = $('#messages'); // Messages area
  var $inputMessage = $('#inputMessage'); // Input message input box
  var $window = $(window);
  var roomID = 0;
  var username = '<%= username %>';
  var connected = false;
  var typing = false;
  var socket = io();

  // Adds a message element to the messages and scrolls to the bottom
  // el - The element to add as a message
  // options.fade - If the element should fade-in (default = true)
  // options.prepend - If the element should prepend
  //   all other messages (default = false)
  const addMessageElement = (el, options) => {
    var $el = $(el);

    // Setup default options
    if (!options) {
      options = {};
    }

    if (typeof options.fade === 'undefined') {
      options.fade = true;
    }

    if (typeof options.prepend === 'undefined') {
      options.prepend = false;
    }

    // Apply options
    if (options.fade) {
      $el.hide().fadeIn(FADE_TIME);
    }

    if (options.prepend) {
      $messages.prepend($el);
    }

    else {
      $messages.append($el);
    }

    $messages[0].scrollTop = $messages[0].scrollHeight;
  }

  // Log a message
  const log = (message, options) => {
    var $el = $('<li>').addClass('log').text(message);
    addMessageElement($el, options);
  }

  const addParticipantsMessage = (data) => {
    var message = '';
    if (data.numUsers === 1) {
      message += "there's 1 participant";
    }

    else {
      message += "there are " + data.numUsers + " participants";
    }
    log(message);
  }

  createRoom.addEventListener('click', function(e) {
    if (confirm('Are you sure you want to create a room?')) {

      if(connected) {
        document.getElementById("messages").style.display = "none";
        document.getElementById("inputMessage").style.display = "none";

        connected = false;
        socket.emit('leave room');
        $messages.empty();
      }

      roomID = 0

      for (i = 0; i < username.length; i++) {
        char = username.charCodeAt(i);
        roomID = ((roomID<<5)-roomID)+char+((Math.random() * username.length) + 1);
        roomID = roomID & roomID; // Convert to 32bit integer
      }

      $.post('/dashboard-messaging', { roomID: roomID });

      /*
      $.ajax({
        url: '/dashboard-messaging',
        type: 'put',
        data: { roomID: roomID },
        success: function (response) {
          console.log(response);
        },
        error: function (XMLHttpRequest, textStatus, errorThrown) {
          console.log('error', errorThrown);
        }
      });
      */

      document.getElementById("messages").style.display = "block";
      document.getElementById("inputMessage").style.display = "block";

      connected = true;

      // Display the welcome message
      var info = "Welcome to Lets-Hang-Out Chat !!! \ The room number is " + roomID;

      log(info, {
        prepend: true
      });

      socket.emit('create room', {
        roomID: roomID,
        username: username
      });

    }
  });

  joinRoom.addEventListener('click', function(e) {

    var rooms;

    $.ajax({
      url: './query',
      type: 'get',
      dataType: 'json',
      success: function (data) {
        console.log('success', data);
        rooms = data;

        if(rooms.length == 0) {
          alert("There is no room to join. \n Please create a new room");
        }

        else {

          var words = "Please enter the room number \n";

          for(i in rooms) {
            words += JSON.stringify(rooms[i]) + "\n";
          }

          var roomNum = prompt(words, "");

          if(roomNum != null && !isNaN(roomNum)) {

            if(connected) {
              document.getElementById("messages").style.display = "none";
              document.getElementById("inputMessage").style.display = "none";

              connected = false;
              socket.emit('leave room');
              $messages.empty();
            }

            connected = true;

            socket.emit('join room', {
              roomID: roomNum,
              username: username
            });

            document.getElementById("messages").style.display = "block";
            document.getElementById("inputMessage").style.display = "block";
            roomID = roomNum;
            // Display the welcome message
            var info = "Welcome to Lets-Hang-Out Chat !!! The room number is " + roomID;

            log(info, {
              prepend: true
            });
          }

        }
      },
      error: function (XMLHttpRequest, textStatus, errorThrown) {
        console.log('error', errorThrown);
      }
    });


  });

  leaveRoom.addEventListener('click', function(e) {

    if (confirm('Are you sure you want to leave this room?')) {

      document.getElementById("messages").style.display = "none";
      document.getElementById("inputMessage").style.display = "none";

      connected = false;

      socket.emit('leave room');

      $messages.empty();

    }

  });

  // Prevents input from having injected markup
  const cleanInput = (input) => {
    return $('<div/>').text(input).html();
  }

  // Updates the typing event
  const updateTyping = () => {
    if (connected) {
      if (!typing) {
        typing = true;
        socket.emit('typing');
      }
      lastTypingTime = (new Date()).getTime();

      setTimeout(() => {
        var typingTimer = (new Date()).getTime();
        var timeDiff = typingTimer - lastTypingTime;
        if (timeDiff >= TYPING_TIMER_LENGTH && typing) {
          socket.emit('stop typing');
          typing = false;
        }
      }, TYPING_TIMER_LENGTH);
    }
  }

  // Gets the 'X is typing' messages of a user
  const getTypingMessages = (data) => {
    return $('.typing.message').filter(function (i) {
      return $(this).data('username') === data.username;
    });
  }

  // Gets the color of a username through our hash function
  const getUsernameColor = (username) => {
    // Compute hash code
    var hash = 7;
    for (var i = 0; i < username.length; i++) {
      hash = username.charCodeAt(i) + (hash << 5) - hash;
    }
    // Calculate color
    var index = Math.abs(hash % COLORS.length);
    return COLORS[index];
  }

  // Adds the visual chat message to the message list
  const addChatMessage = (data, options) => {
    // Don't fade the message in if there is an 'X was typing'
    var $typingMessages = getTypingMessages(data);
    options = options || {};
    if ($typingMessages.length !== 0) {
      options.fade = false;
      $typingMessages.remove();
    }

    var $usernameDiv = $('<span class="username"/>')
      .text(data.username)
      .css('color', getUsernameColor(data.username));

    var $messageBodyDiv = $('<span class="messageBody">')
      .text(data.message);

    var typingClass = data.typing ? 'typing' : '';

    var $messageDiv = $('<li class="message" style="list-style-type:none;"/>')
      .data('username', data.username)
      .addClass(typingClass)
      .append($usernameDiv, $messageBodyDiv);

    addMessageElement($messageDiv, options);
  }

  // Sends a chat message
  const sendMessage = () => {
    var message = $inputMessage.val();
    // Prevent markup from being injected into the message
    message = cleanInput(message);
    message = " " + message;
    // if there is a non-empty message and a socket connection
    if (message && connected) {
      $inputMessage.val('');
      addChatMessage({
        username: username,
        message: message
      });

      // tell server to execute 'new message' and send along one parameter
      socket.emit('new message', message);
    }
  }

  // Adds the visual chat typing message
  const addChatTyping = (data) => {
    data.typing = true;
    data.message = 'is typing';
    addChatMessage(data);
  }

  // Removes the visual chat typing message
  const removeChatTyping = (data) => {
    getTypingMessages(data).fadeOut(function () {
      $(this).remove();
    });
  }

  $window.keydown(event => {
    // Auto-focus the current input when a key is typed
    if (!(event.ctrlKey || event.metaKey || event.altKey)) {
      //$currentInput.focus();
    }
    // When the client hits ENTER on their keyboard
    if (event.which === 13) {

      if (roomID) {
        sendMessage();
        socket.emit('stop typing');
        typing = false;
      }
    }

  });

  $inputMessage.on('input', () => {
    updateTyping();
  });

  // Whenever the server emits 'new message', update the chat body
  socket.on('new message', function (data) {
    addChatMessage(data);
  });

  // Whenever the server emits 'user joined', log it in the chat body
  socket.on('user joined', (data) => {
    log(data.username + ' joined');
    addParticipantsMessage(data);
  });

  socket.on('empty room', (data) => {
    connected = false;
    roomID = 0;
    $messages.empty();
    document.getElementById("messages").style.display = "none";
    document.getElementById("inputMessage").style.display = "none";
    alert("This room does not exist!!");
  });

  // Whenever the server emits 'typing', show the typing message
  socket.on('typing', (data) => {
    addChatTyping(data);
  });

  // Whenever the server emits 'stop typing', kill the typing message
  socket.on('stop typing', (data) => {
    removeChatTyping(data);
  });

  // Whenever the server emits 'user left', log it in the chat body
  socket.on('user left', (data) => {
    log(data.username + ' left');
    addParticipantsMessage(data);
    removeChatTyping(data);
  });


  socket.on('disconnect', () => {
    log('you have been disconnected');
    
    document.getElementById("messages").style.display = "none";
    document.getElementById("inputMessage").style.display = "none";
    connected = false;
    $messages.empty();
  });


</script>
